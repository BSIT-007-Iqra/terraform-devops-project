# Local .terraform directories
<<<<<<< HEAD
**/.terraform/*

# .tfstate files (store infrastructure state)
=======
.terraform/

# .tfstate files
>>>>>>> 65a816dada0bbc1fd0791ea21d973905e0763d5d
*.tfstate
*.tfstate.*

# Crash log files
crash.log
<<<<<<< HEAD

# Exclude override files (used locally)
=======
crash.*.log

# Exclude all .tfvars files, which are likely to contain sensitive data, such as
# password, private keys, and other secrets. These should not be part of version 
# control as they are data points which are potentially sensitive and subject 
# to change depending on the environment.
*.tfvars
*.tfvars.json

# Ignore override files as they are usually used to override resources locally and so
# are not checked in
>>>>>>> 65a816dada0bbc1fd0791ea21d973905e0763d5d
override.tf
override.tf.json
*_override.tf
*_override.tf.json

<<<<<<< HEAD
# Sensitive variable files
*.tfvars
*.tfvars.json

# Ignore CLI configuration
.terraformrc
terraform.rc

# Misc
*.log
=======
# Ignore transient lock info files created by terraform apply
.terraform.tfstate.lock.info

# Include override files you do wish to add to version control using negated pattern
# !example_override.tf

# Include tfplan files to ignore the plan output of command: terraform plan -out=tfplan
# example: *tfplan*

# Ignore CLI configuration files
.terraformrc
terraform.rc
>>>>>>> 65a816dada0bbc1fd0791ea21d973905e0763d5d
